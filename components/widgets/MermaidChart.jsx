// components/widgets/MermaidChart.jsx
'use client';
import React, { useEffect, useState, useId } from 'react';
import { Box, Paper, Typography, CircularProgress } from '@mui/material';
import { marked } from 'marked';
import mermaid from 'mermaid';

// A modern, vibrant theme for our flowcharts
const mermaidTheme = {
  theme: 'base',
  themeVariables: {
    // Backgrounds
    primaryColor: '#F3F4F6',        // Default node background (light gray)
    secondaryColor: '#DBEAFE',      // Decision node background (light blue)
    tertiaryColor: '#D1FAE5',       // Start/End node background (light green)
    
    // Borders and Lines
    primaryBorderColor: '#6366F1',  // Indigo border for default nodes
    lineColor: '#4B5563',           // Dark gray for arrows and lines
    
    // Text
    primaryTextColor: '#111827',    // Dark text for readability
    secondaryTextColor: '#1E40AF',  // Dark blue text for decision nodes
    tertiaryTextColor: '#065F46',   // Dark green text for start/end nodes
  },
  fontFamily: '"Inter", sans-serif',
};

// Initialize Mermaid with our beautiful theme
mermaid.initialize({
  startOnLoad: false,
  ...mermaidTheme,
});

export default function MermaidChart({ payload }) {
  const { mermaid_code, intro_text, title } = payload;
  
  // useId provides a stable, unique ID for SSR and client-side rendering
  const uniqueId = useId();
  const [svgContent, setSvgContent] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (mermaid_code) {
      setIsLoading(true);
      setError('');
      try {
        // Asynchronously render the Mermaid diagram
        mermaid.render(`mermaid-svg-${uniqueId}`, mermaid_code).then(({ svg }) => {
          setSvgContent(svg);
        }).catch(err => {
          console.error("Mermaid rendering error:", err);
          setError("Could not render the flowchart diagram.");
        }).finally(() => {
          setIsLoading(false);
        });
      } catch (e) {
        console.error("Mermaid syntax error:", e);
        setError("Invalid flowchart syntax provided.");
        setIsLoading(false);
      }
    } else {
      setError("No flowchart data available.");
      setIsLoading(false);
    }
  }, [mermaid_code, uniqueId]);

  return (
    <Box sx={{ mt: 1.5 }}>
      {intro_text && (
        <Typography 
          component="div" 
          sx={{ mb: 1.5, color: 'text.secondary' }} 
          dangerouslySetInnerHTML={{ __html: marked.parse(intro_text) }}
        />
      )}
      <Paper 
        variant="outlined" 
        sx={{ 
          p: { xs: 2, md: 3 }, 
          borderRadius: '16px', 
          bgcolor: 'white',
          boxShadow: '0 4px 12px rgba(0,0,0,0.05)',
          overflow: 'hidden',
        }}
      >
        {title && (
            <Typography variant="h6" sx={{ mb: 2, fontWeight: 600, textAlign: 'center' }}>
                {title}
            </Typography>
        )}
        <Box 
          sx={{ 
            display: 'flex', 
            justifyContent: 'center', 
            alignItems: 'center',
            minHeight: '150px',
            '& svg': { 
              maxWidth: '100%',
              height: 'auto',
            } 
          }}
        >
          {isLoading && <CircularProgress />}
          {error && <Typography color="error">{error}</Typography>}
          {!isLoading && !error && (
            // The dangerouslySetInnerHTML is safe here because `svgContent` is generated by Mermaid, not user input.
            <div dangerouslySetInnerHTML={{ __html: svgContent }} />
          )}
        </Box>
      </Paper>
    </Box>
  );
}